"""initial changes

Revision ID: 489357d3f035
Revises: 
Create Date: 2025-10-09 22:58:25.444688

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '489357d3f035'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('question_bank',
    sa.Column('paper_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('question_no', sa.Integer(), nullable=False),
    sa.Column('max_marks', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('paper_id', 'question_no')
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('password', sa.String(length=255), nullable=False),
    sa.Column('type', sa.String(length=255), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('examiners',
    sa.Column('examiner_id', sa.Integer(), nullable=False),
    sa.Column('paper_id', sa.Integer(), nullable=False),
    sa.Column('question_no', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['examiner_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['paper_id', 'question_no'], ['question_bank.paper_id', 'question_bank.question_no'], ),
    sa.PrimaryKeyConstraint('examiner_id', 'paper_id', 'question_no')
    )
    op.create_table('student_workbook',
    sa.Column('student_id', sa.Integer(), nullable=False),
    sa.Column('workbook_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['student_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('student_id'),
    sa.UniqueConstraint('workbook_id')
    )
    op.create_table('user_log',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('mac_addr', sa.String(length=54), nullable=False),
    sa.Column('action', sa.String(length=255), nullable=False),
    sa.Column('time', sa.TIMESTAMP(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('images',
    sa.Column('workbook_id', sa.Integer(), nullable=False),
    sa.Column('paper_id', sa.Integer(), nullable=False),
    sa.Column('question_no', sa.Integer(), nullable=False),
    sa.Column('page_no', sa.Integer(), nullable=False),
    sa.Column('object_key', sa.String(length=255), nullable=False),
    sa.ForeignKeyConstraint(['paper_id', 'question_no'], ['question_bank.paper_id', 'question_bank.question_no'], ),
    sa.ForeignKeyConstraint(['workbook_id'], ['student_workbook.workbook_id'], ),
    sa.PrimaryKeyConstraint('workbook_id', 'paper_id', 'question_no', 'page_no')
    )
    op.create_table('workbook_log',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('mac_addr', sa.String(length=54), nullable=False),
    sa.Column('action', sa.String(length=255), nullable=False),
    sa.Column('time', sa.TIMESTAMP(), nullable=False),
    sa.Column('workbook_id', sa.Integer(), nullable=False),
    sa.Column('question_no', sa.Integer(), nullable=True),
    sa.Column('old_val', sa.Integer(), nullable=True),
    sa.Column('new_val', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['workbook_id'], ['student_workbook.workbook_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('workbook_marking',
    sa.Column('workbook_id', sa.Integer(), nullable=False),
    sa.Column('paper_id', sa.Integer(), nullable=False),
    sa.Column('question_no', sa.Integer(), nullable=False),
    sa.Column('open_time', sa.TIMESTAMP(), nullable=False),
    sa.Column('marks', sa.Integer(), nullable=True),
    sa.Column('submit_time', sa.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['paper_id', 'question_no'], ['question_bank.paper_id', 'question_bank.question_no'], ),
    sa.ForeignKeyConstraint(['workbook_id'], ['student_workbook.workbook_id'], ),
    sa.PrimaryKeyConstraint('workbook_id', 'paper_id', 'question_no')
    )
    op.create_table('workbook_status',
    sa.Column('workbook_id', sa.Integer(), nullable=False),
    sa.Column('paper_id', sa.Integer(), nullable=False),
    sa.Column('question_no', sa.Integer(), nullable=False),
    sa.Column('checked', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['paper_id', 'question_no'], ['question_bank.paper_id', 'question_bank.question_no'], ),
    sa.ForeignKeyConstraint(['workbook_id'], ['student_workbook.workbook_id'], ),
    sa.PrimaryKeyConstraint('workbook_id', 'paper_id', 'question_no')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('workbook_status')
    op.drop_table('workbook_marking')
    op.drop_table('workbook_log')
    op.drop_table('images')
    op.drop_table('user_log')
    op.drop_table('student_workbook')
    op.drop_table('examiners')
    op.drop_table('users')
    op.drop_table('question_bank')
    # ### end Alembic commands ###
